Webpack, parcel and vite are the types of bundler.

Most bundlers do the same job : minify the code, remove console logs and do a lot of optimizations.

Bundling is the process of following imported files and merging them into a single file: a “bundle”. This bundle can then be included on a webpage to load an entire app at once.

create-react-app uses Webpack as the bundler.

npm, yarn is a package manager.
npm != node package manager.

npm is used as a package manager in order to manage all our packages.

Initialize a package manager : npm init. Go with all defaults and create it.
(npm init -y is to skip some stuff)

React cannot be just with importing react and reactDOM, we need npm as well. It is like maven for UI.
React needs npm because of the requirement of lot of other packages that are bundled for optimizing, minifying etc. the code.
The packages are present by using npm.

For igniting app we use parcel.
npm install -D parcel is to get parcel bundler into our project. (-D means dev dependency)
dependency means all the packages our project needs.
-D means it is there only on our development machine not production.
If we do not use -D then the package is for global environment.

package.json has ^2.8.2 as the caret version. This means that the parcel version will automatically upgrade itself if needed. 
Whereas for package-lock.json we have the exact version of parcel running 2.8.2. This basically locks the version of the package we are using so that there is no uncertainity.
IMP :
package-lock.json : locks the version. Do not keep it in .gitignore.
To know what exact version of the application is running in production we use package-lock.json. The package-lock.json maintains the hash of the version as well.

npm install -D parcel will create the package-lock.json and node modules folder.
Whenever we install something it goes into node modules.
parcel is there in node modules. 
As we want to have a production ready code for our application, we need more packages other than just React in order to minify, bundle, optimize etc. our web application. In order to do all these we installed parcel and thus installed a lot of packages along with it.

WE MUST NEVER HAVE node modules IN OUR GIT REPOSITORY.
It is because node modules are heavy and also our package-lock.json has enough information to recreate node modules on our server.
WE WILL GENERATE node modules on server. We just ship package-json.json which recreates it in server.

Learn about tilde(~) and caret(^) for versions.

Getting react into app via CDN is not a good way to bring react into our app. Since when the React version changes we manually have to change the CDN links. 
Also when we deploy the our app into prod server we will fetch react from CDN. Instead of that it is faster to fetch
it from our server. 
So install React and ReactDOM into node modules for that.
npm install react : for installing react into our node modules. No -D since we want it our prod server as well.
npm install react-dom : for installing react-DOM into our node modules.

To ignite the app : npx parcel index.html.
npx for execute.
Parcel has given the local server for us.
We get the error of React not defined since we have removed the script tags and installed it in our node modules folder.

In order to use it import it from the node modules folder.
Now even after importing we see an error in the browser that imports and exports cannot work.
This is because our browser does not know about import , since it considers App.js as a plain JS file.
We need to tell the browser that the App.js is a module.

Hot module reload is the functionality given by parcel.
This functionality gives the changes in UI just by saving the file.
File watcher algorithm (written in C++) is used by parcel in order to keep track of the changes in the files.
parcel uses parcel cache in order to do its functionalities like hot module reloading, minifying etc.

After running npx parcel index.html, parcel will bundle all our code (minifying) into files which are present in dist folder.
All our code is bundled and minifyed into 3 files present in dist folder by parcel. 
Only these build files will be in production.
We will find no console logs in our minifyed code present in dist folder since it has to be in production.

npx parcel build index.html : This will build the production build for our application.

When we have to deploy application to production, we are basically deploying a minifyed version of our app build into production. 
parcel does all the stuff of minifying our code, packages etc.
parcel does image optimizations as well.
parcel also does caching while development.
parcel also makes sure the application is compatible with other browsers.
parcel manages port number as well.
parcel.cache must be kept in .gitignore.
Anything which is auto generated on server can be kept in gitignore.
parcel is a zero config bundler.
React is MODI,then Parcel is Amit Shah.
Transitive dependencies are present in our application here: Parcel has some dependencies for it to exist, those dependencies have some other dependencies to exist.
Package manager takes care of the transitive dependencies present in our code.

SUMMARY :
When we are building a production ready app we need to do a lot of things:
->Bundling
->Minification
->Optimizations
->Caching
->Cleaning our code
->Hot Module Replacement (HMR)
->Making it compatible with older browsers.
etc. and we cannot do this alone, we need some dependencies (e.g. parcel).
When we use dependencies those are also dependent on other dependencies which makes a dependency tree. These are transitive dependency.

browserlist is a dependency used by parcel in order to make our application compatible with all browsers.
